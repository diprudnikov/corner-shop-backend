"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const express = require("express");
const logger = require("morgan");
const bodyParser = require("body-parser");
const cors = require("cors");
const home_controller_1 = require("./controllers/home.controller");
const products_controller_1 = require("./controllers/products.controller");
const product_repository_1 = require("./repositories/product.repository");
const cart_controller_1 = require("./controllers/cart.controller");
const cart_repository_1 = require("./repositories/cart.repository");
const tax_repository_1 = require("./repositories/tax.repository");
class App {
    constructor() {
        require('dotenv').config();
        this.express = express();
        this.setup();
        this.middleware();
    }
    setup() {
        this.express.set('views', path.resolve(`${__dirname}/views`));
        this.express.set('view engine', 'pug');
    }
    middleware() {
        this.express.use(logger('dev'));
        this.express.use(bodyParser.json());
        this.express.use(bodyParser.urlencoded({ extended: false }));
        this.express.use(cors());
    }
    routes(connection) {
        const productRepository = new product_repository_1.ProductRepository(connection);
        const cartRepository = new cart_repository_1.CartRepository(connection);
        const taxRepository = new tax_repository_1.TaxRepository(connection);
        this.express.use('/', new home_controller_1.HomeController().router);
        this.express.use('/api/products', new products_controller_1.ProductsController(productRepository).router);
        this.express.use('/api/cart', new cart_controller_1.CartController(cartRepository, taxRepository).router);
    }
}
exports.default = new App();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsbUNBQW1DO0FBQ25DLGlDQUFpQztBQUNqQywwQ0FBMEM7QUFDMUMsNkJBQTZCO0FBRTdCLG1FQUErRDtBQUMvRCwyRUFBdUU7QUFDdkUsMEVBQXNFO0FBQ3RFLG1FQUErRDtBQUMvRCxvRUFBZ0U7QUFDaEUsa0VBQThEO0FBRTlEO0lBR0U7UUFDRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLFVBQVU7UUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVTtRQUN0QixNQUFNLGlCQUFpQixHQUFHLElBQUksc0NBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sYUFBYSxHQUFHLElBQUksOEJBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxnQ0FBYyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksd0NBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxnQ0FBYyxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxJQUFJLEdBQUcsRUFBRSxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdtb3JnYW4nO1xyXG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcclxuaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcclxuXHJcbmltcG9ydCB7IEhvbWVDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9ob21lLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBQcm9kdWN0c0NvbnRyb2xsZXIgfSBmcm9tICcuL2NvbnRyb2xsZXJzL3Byb2R1Y3RzLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBQcm9kdWN0UmVwb3NpdG9yeSB9IGZyb20gJy4vcmVwb3NpdG9yaWVzL3Byb2R1Y3QucmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IENhcnRDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9jYXJ0LmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDYXJ0UmVwb3NpdG9yeSB9IGZyb20gJy4vcmVwb3NpdG9yaWVzL2NhcnQucmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IFRheFJlcG9zaXRvcnkgfSBmcm9tICcuL3JlcG9zaXRvcmllcy90YXgucmVwb3NpdG9yeSc7XHJcblxyXG5jbGFzcyBBcHAge1xyXG4gIHB1YmxpYyBleHByZXNzOiBleHByZXNzLkFwcGxpY2F0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xyXG4gICAgdGhpcy5leHByZXNzID0gZXhwcmVzcygpO1xyXG4gICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgdGhpcy5taWRkbGV3YXJlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0dXAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmV4cHJlc3Muc2V0KCd2aWV3cycsIHBhdGgucmVzb2x2ZShgJHtfX2Rpcm5hbWV9L3ZpZXdzYCkpO1xyXG4gICAgdGhpcy5leHByZXNzLnNldCgndmlldyBlbmdpbmUnLCAncHVnJyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbWlkZGxld2FyZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZXhwcmVzcy51c2UobG9nZ2VyKCdkZXYnKSk7XHJcbiAgICB0aGlzLmV4cHJlc3MudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcclxuICAgIHRoaXMuZXhwcmVzcy51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcclxuICAgIHRoaXMuZXhwcmVzcy51c2UoY29ycygpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByb3V0ZXMoY29ubmVjdGlvbik6IHZvaWQge1xyXG4gICAgY29uc3QgcHJvZHVjdFJlcG9zaXRvcnkgPSBuZXcgUHJvZHVjdFJlcG9zaXRvcnkoY29ubmVjdGlvbik7XHJcbiAgICBjb25zdCBjYXJ0UmVwb3NpdG9yeSA9IG5ldyBDYXJ0UmVwb3NpdG9yeShjb25uZWN0aW9uKTtcclxuICAgIGNvbnN0IHRheFJlcG9zaXRvcnkgPSBuZXcgVGF4UmVwb3NpdG9yeShjb25uZWN0aW9uKTtcclxuXHJcbiAgICB0aGlzLmV4cHJlc3MudXNlKCcvJywgbmV3IEhvbWVDb250cm9sbGVyKCkucm91dGVyKTtcclxuICAgIHRoaXMuZXhwcmVzcy51c2UoJy9hcGkvcHJvZHVjdHMnLCBuZXcgUHJvZHVjdHNDb250cm9sbGVyKHByb2R1Y3RSZXBvc2l0b3J5KS5yb3V0ZXIpO1xyXG4gICAgdGhpcy5leHByZXNzLnVzZSgnL2FwaS9jYXJ0JywgbmV3IENhcnRDb250cm9sbGVyKGNhcnRSZXBvc2l0b3J5LCB0YXhSZXBvc2l0b3J5KS5yb3V0ZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IEFwcCgpO1xyXG4iXX0=
